// Mocks generated by Mockito 5.4.4 from annotations
// in ulist_project/test/helpers/test_mock.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i6;

import 'package:dartz/dartz.dart' as _i2;
import 'package:flutter/foundation.dart' as _i4;
import 'package:flutter/src/widgets/framework.dart' as _i3;
import 'package:flutter/src/widgets/notification_listener.dart' as _i12;
import 'package:mockito/mockito.dart' as _i1;
import 'package:ulist_project/core/errors.dart' as _i7;
import 'package:ulist_project/core/usecase.dart' as _i9;
import 'package:ulist_project/features/todo/data/datasources/todo_remote_datasource.dart'
    as _i10;
import 'package:ulist_project/features/todo/data/models.dart' as _i11;
import 'package:ulist_project/features/todo/domain/entities.dart' as _i8;
import 'package:ulist_project/features/todo/domain/repositories/todo_repository.dart'
    as _i5;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeWidget_1 extends _i1.SmartFake implements _i3.Widget {
  _FakeWidget_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );

  @override
  String toString({_i4.DiagnosticLevel? minLevel = _i4.DiagnosticLevel.info}) =>
      super.toString();
}

class _FakeInheritedWidget_2 extends _i1.SmartFake
    implements _i3.InheritedWidget {
  _FakeInheritedWidget_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );

  @override
  String toString({_i4.DiagnosticLevel? minLevel = _i4.DiagnosticLevel.info}) =>
      super.toString();
}

class _FakeDiagnosticsNode_3 extends _i1.SmartFake
    implements _i4.DiagnosticsNode {
  _FakeDiagnosticsNode_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );

  @override
  String toString({
    _i4.TextTreeConfiguration? parentConfiguration,
    _i4.DiagnosticLevel? minLevel = _i4.DiagnosticLevel.info,
  }) =>
      super.toString();
}

/// A class which mocks [ITodoRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockITodoRepository extends _i1.Mock implements _i5.ITodoRepository {
  MockITodoRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Future<_i2.Either<_i7.IFailure, _i8.TodoListEntity>> getTodoList(
          _i9.NoParams? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #getTodoList,
          [params],
        ),
        returnValue:
            _i6.Future<_i2.Either<_i7.IFailure, _i8.TodoListEntity>>.value(
                _FakeEither_0<_i7.IFailure, _i8.TodoListEntity>(
          this,
          Invocation.method(
            #getTodoList,
            [params],
          ),
        )),
      ) as _i6.Future<_i2.Either<_i7.IFailure, _i8.TodoListEntity>>);

  @override
  _i6.Future<_i2.Either<_i7.IFailure, bool>> saveTodo(
          _i8.SaveTodoParams? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #saveTodo,
          [params],
        ),
        returnValue: _i6.Future<_i2.Either<_i7.IFailure, bool>>.value(
            _FakeEither_0<_i7.IFailure, bool>(
          this,
          Invocation.method(
            #saveTodo,
            [params],
          ),
        )),
      ) as _i6.Future<_i2.Either<_i7.IFailure, bool>>);

  @override
  _i6.Future<_i2.Either<_i7.IFailure, bool>> deleteTodo(String? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteTodo,
          [params],
        ),
        returnValue: _i6.Future<_i2.Either<_i7.IFailure, bool>>.value(
            _FakeEither_0<_i7.IFailure, bool>(
          this,
          Invocation.method(
            #deleteTodo,
            [params],
          ),
        )),
      ) as _i6.Future<_i2.Either<_i7.IFailure, bool>>);
}

/// A class which mocks [ITodoRemoteDatasource].
///
/// See the documentation for Mockito's code generation for more information.
class MockITodoRemoteDatasource extends _i1.Mock
    implements _i10.ITodoRemoteDatasource {
  MockITodoRemoteDatasource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Future<_i2.Either<_i7.IFailure, _i11.TodoListResponse>> list(
          _i9.NoParams? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #list,
          [params],
        ),
        returnValue:
            _i6.Future<_i2.Either<_i7.IFailure, _i11.TodoListResponse>>.value(
                _FakeEither_0<_i7.IFailure, _i11.TodoListResponse>(
          this,
          Invocation.method(
            #list,
            [params],
          ),
        )),
      ) as _i6.Future<_i2.Either<_i7.IFailure, _i11.TodoListResponse>>);

  @override
  _i6.Future<_i2.Either<_i7.IFailure, bool>> save(_i8.SaveTodoParams? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #save,
          [params],
        ),
        returnValue: _i6.Future<_i2.Either<_i7.IFailure, bool>>.value(
            _FakeEither_0<_i7.IFailure, bool>(
          this,
          Invocation.method(
            #save,
            [params],
          ),
        )),
      ) as _i6.Future<_i2.Either<_i7.IFailure, bool>>);

  @override
  _i6.Future<_i2.Either<_i7.IFailure, bool>> delete(String? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #delete,
          [params],
        ),
        returnValue: _i6.Future<_i2.Either<_i7.IFailure, bool>>.value(
            _FakeEither_0<_i7.IFailure, bool>(
          this,
          Invocation.method(
            #delete,
            [params],
          ),
        )),
      ) as _i6.Future<_i2.Either<_i7.IFailure, bool>>);
}

/// A class which mocks [BuildContext].
///
/// See the documentation for Mockito's code generation for more information.
class MockBuildContext extends _i1.Mock implements _i3.BuildContext {
  @override
  _i3.Widget get widget => (super.noSuchMethod(
        Invocation.getter(#widget),
        returnValue: _FakeWidget_1(
          this,
          Invocation.getter(#widget),
        ),
        returnValueForMissingStub: _FakeWidget_1(
          this,
          Invocation.getter(#widget),
        ),
      ) as _i3.Widget);

  @override
  bool get mounted => (super.noSuchMethod(
        Invocation.getter(#mounted),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  bool get debugDoingBuild => (super.noSuchMethod(
        Invocation.getter(#debugDoingBuild),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  _i3.InheritedWidget dependOnInheritedElement(
    _i3.InheritedElement? ancestor, {
    Object? aspect,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #dependOnInheritedElement,
          [ancestor],
          {#aspect: aspect},
        ),
        returnValue: _FakeInheritedWidget_2(
          this,
          Invocation.method(
            #dependOnInheritedElement,
            [ancestor],
            {#aspect: aspect},
          ),
        ),
        returnValueForMissingStub: _FakeInheritedWidget_2(
          this,
          Invocation.method(
            #dependOnInheritedElement,
            [ancestor],
            {#aspect: aspect},
          ),
        ),
      ) as _i3.InheritedWidget);

  @override
  void visitAncestorElements(_i3.ConditionalElementVisitor? visitor) =>
      super.noSuchMethod(
        Invocation.method(
          #visitAncestorElements,
          [visitor],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void visitChildElements(_i3.ElementVisitor? visitor) => super.noSuchMethod(
        Invocation.method(
          #visitChildElements,
          [visitor],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void dispatchNotification(_i12.Notification? notification) =>
      super.noSuchMethod(
        Invocation.method(
          #dispatchNotification,
          [notification],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i4.DiagnosticsNode describeElement(
    String? name, {
    _i4.DiagnosticsTreeStyle? style = _i4.DiagnosticsTreeStyle.errorProperty,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #describeElement,
          [name],
          {#style: style},
        ),
        returnValue: _FakeDiagnosticsNode_3(
          this,
          Invocation.method(
            #describeElement,
            [name],
            {#style: style},
          ),
        ),
        returnValueForMissingStub: _FakeDiagnosticsNode_3(
          this,
          Invocation.method(
            #describeElement,
            [name],
            {#style: style},
          ),
        ),
      ) as _i4.DiagnosticsNode);

  @override
  _i4.DiagnosticsNode describeWidget(
    String? name, {
    _i4.DiagnosticsTreeStyle? style = _i4.DiagnosticsTreeStyle.errorProperty,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #describeWidget,
          [name],
          {#style: style},
        ),
        returnValue: _FakeDiagnosticsNode_3(
          this,
          Invocation.method(
            #describeWidget,
            [name],
            {#style: style},
          ),
        ),
        returnValueForMissingStub: _FakeDiagnosticsNode_3(
          this,
          Invocation.method(
            #describeWidget,
            [name],
            {#style: style},
          ),
        ),
      ) as _i4.DiagnosticsNode);

  @override
  List<_i4.DiagnosticsNode> describeMissingAncestor(
          {required Type? expectedAncestorType}) =>
      (super.noSuchMethod(
        Invocation.method(
          #describeMissingAncestor,
          [],
          {#expectedAncestorType: expectedAncestorType},
        ),
        returnValue: <_i4.DiagnosticsNode>[],
        returnValueForMissingStub: <_i4.DiagnosticsNode>[],
      ) as List<_i4.DiagnosticsNode>);

  @override
  _i4.DiagnosticsNode describeOwnershipChain(String? name) =>
      (super.noSuchMethod(
        Invocation.method(
          #describeOwnershipChain,
          [name],
        ),
        returnValue: _FakeDiagnosticsNode_3(
          this,
          Invocation.method(
            #describeOwnershipChain,
            [name],
          ),
        ),
        returnValueForMissingStub: _FakeDiagnosticsNode_3(
          this,
          Invocation.method(
            #describeOwnershipChain,
            [name],
          ),
        ),
      ) as _i4.DiagnosticsNode);
}
